#!/bin/bash

#================================= GLOBAL VARS ==================================

#
# The script expects '0.5' but non-US localizations use '0,5' so we export
# LC_NUMERIC here (for the duration of the deploy.sh) to prevent errors.
#
export LC_NUMERIC="en_US.UTF-8"

#
# Script version info.
#
gScriptVersion=1.0

#
# GitHub branch to pull data from (master or Beta).
#
# github change branch name from 'master' to 'main', this patch
# read the branch name
# 2ff1c2a9c4c73dd33857bfd657e479d445d43aa7 refs/heads/master
# 2ff1c2a9c4c73dd33857bfd657e479d445d43aa7 refs/remotes/origin/HEAD
# 2ff1c2a9c4c73dd33857bfd657e479d445d43aa7 refs/remotes/origin/master
gGitHubBranch="$(git show-ref|grep heads|awk '{print $2}'|cut -d '/' -f 3)"

#
# Get user id
#
let gID=$(id -u)

#
# Prevent non-printable/control characters.
#
unset GREP_OPTIONS
unset GREP_COLORS
unset GREP_COLOR

#
# Display style setting.
#
BOLD="\033[1m"
RED="\033[1;31m"
GREEN="\033[1;32m"
BLUE="\033[1;34m"
OFF="\033[0m"

#
# Define two status: 0 - Success, Turn on,
#                    1 - Failure, Turn off
#
kBASHReturnSuccess=0
kBASHReturnFailure=1

#
# Function return val
#
RETURN_VAL=0

#
# Locate repository.
#
REPO=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

#
# Define update location
#
gUPD_REPO=${REPO}

#
# Define global variables
#
gCommit_Contents=""

#
#--------------------------------------------------------------------------------
#

function _PRINT_MSG()
{
    local message=$1

    case "$message" in
      OK*    ) local message=$(echo $message | sed -e 's/.*OK://')
               echo -e "[  ${GREEN}OK${OFF}  ] ${message}."
               ;;

      FAILED*) local message=$(echo $message | sed -e 's/.*://')
               echo -e "[${RED}FAILED${OFF}] ${message}."
               ;;

      ---*   ) local message=$(echo $message | sed -e 's/.*--->://')
               echo -e "[ ${GREEN}--->${OFF} ] ${message}"
               ;;

      NOTE*  ) local message=$(echo $message | sed -e 's/.*NOTE://')
               echo -e "[ ${RED}Note${OFF} ] ${message}."
               ;;
    esac
}

#
#--------------------------------------------------------------------------------
#

function _tidy_exec()
{
    if [ $gDebug -eq 0 ];
      then
        #
        # Using debug mode to output all the details.
        #
        _PRINT_MSG "DEBUG: $2"
        $1
      else
        #
        # Make the output clear.
        #
        $1 >/tmp/report 2>&1 && RETURN_VAL=${kBASHReturnSuccess} || RETURN_VAL=${kBASHReturnFailure}

        if [ "${RETURN_VAL}" == ${kBASHReturnSuccess} ];
          then
            _PRINT_MSG "OK: $2"
          else
            _PRINT_MSG "FAILED: $2"
            cat /tmp/report
        fi

        rm /tmp/report &> /dev/null
    fi
}

#
#--------------------------------------------------------------------------------
#

function _jmp2repo()
{
    cd ${gUPD_REPO}
}

#
#--------------------------------------------------------------------------------
#

function _add_commit()
{
    printf "Enter commit"
    read -p ": " gCommit_Contents
    git commit -m "${gCommit_Contents}" 
}

#
#--------------------------------------------------------------------------------
#

function _push()
{
    _tidy_exec "git push -u origin ${gGitHubBranch}" "${gCommit_Contents}"
}

#
#--------------------------------------------------------------------------------
#

function main()
{
    #
    # Get argument.
    #
    gArgv=$(echo "$@" | tr '[:lower:]' '[:upper:]')
    if [[ $# -eq 1 && "$gArgv" == "-D" || "$gArgv" == "-DEBUG" ]];
      then
        #
        # Yes, we do need debug mode.
        #
        _PRINT_MSG "NOTE: Use ${BLUE}DEBUG${OFF} mode"
        gDebug=0
      else
        #
        # No, we need a clean output style.
        #
        gDebug=1
    fi

    # jump to repo
    _jmp2repo
    # add update
    git add .
    # gain commit contents
    _add_commit
    # push update to github
    _push
}

#==================================== START =====================================

main "$@"

#================================================================================

exit ${RETURN_VAL}
